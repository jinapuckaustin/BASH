curl - brings a webpage through the terminal.
      EX: curl cht.sh or curl cht.sh/command
        -   cht.sh website made for BASH that will grab a detailed manual page and examples.
  
man - an interface to the on-line reference manuals.
  -- does not always bring up examples.
  '-f' - in a man page brings up the flags/options.
  /pattern - search forward for (N-th) matching line
  ?pattern - search backward for (N-th) matching line
  &pattern - display only matching lines
  n or shift+n - moves between search results
  q - quit man
  
  echo "something something in the neghborhood" > strange.txt
    - this will cat "text" to a file
    - if file does not exist, BASH will create it
    - this will append to the file, not overwrite
  
  -----order of operations-----
  Redirection
  alias
    EX: ls = 'ls --color=auto'
  parameter expansion, command substitution, arithmetic expansion, and quote removal.
  shell function
  built-in commands
  hash tables
  path variable
  error
  
  touch file{1..5}.txt 
  creates files file1.txt though file5.txt
  
  ~/ or $HOME - the home directory (~ IS $HOME)
  etc/passwd - absolute path
  ./ or .. - relative paths
  
  -----file system commands-----
  touch --- touch -t
    change timestamps
  mkdir ---
  rm --- rm -rf
    rmdir, basically
  rmdir --- rmdir -p
    removes directory and ancestors
  ls --- ls -lisa
    shows permission list, file size, and timestamps
  cd --- cd - moving around files
  
  
  -----Processes and Memory-----
  ps - process snapshot
  
  -terminating processes-
  kill
  kill -9 1234
  killall
  killall firefox
  
  -----cat, more || less-----
  cat - prints out the contents fully (gotta scroll up)
  more - lets you space+tab through until the end (b goes back)
  less - gives a brief synopsis of a file
  q - quit
  
  -----head and tail-----
  head - print first 10 lines of a file
  tail - print last 10 lines of a file
  
  -----finding files and dirs------
  find - search for files, by defalt only looks in current directory
    EX: find *.txt - will return (case sensitive, use -iname for nocase) all .txt items in the currents directory
    -name - case sensitive search boundary
    -iname - name, but case insensitive
    -find /  - will begin the search in  root
    -type
    -mtime 2 (2 being days) - look for files made in last () days.
    -empty - empty files
    -executable - finds executable files
    -exec - will execute following commands on found file
      - must end a -exec line with \;
      - file(s) are referenced after -exec with {}
            EX: find $HOME/1123/*[^~].txt -exec cp {} $HOME/CUT \;
    -printf - prints the ouput to the screen
    -inum - finds files with the specified inode number
            EX: find / -inum ##### -printf "%f\n" - prints only the filename of inode ####
                  - / is root, searching everything.
      -EX: find -empty -printf "%i %f\n" - prints empty filenames and their inode followed by a newline
        -%1 will specifiy the number that the file is in memory(\n is newline of course)
        -%f will print only the specified filename
finding files W/out a character 
EX: find $HOME/1123/*[^~].txt
        
  whereis/locate - returns location of file with name
  which - look through past directories
  
-----good ol' grep-----
search for patterns in a file, print the line (only the line) with that pattern.
grep supports files, no need to cat the file.
EX: grep --help | grep grep
  - print the help page for grep, then redirects that to a grep cmd that greps the lines with 'grep' in them
  -- -i = nocase
  -- in prints with lines numbers
  -- C5 prints five lines bofa directions
  -- A5 prints five after
  -- B5 prints 5 before
  -- egrep - search for patterns using regex
      -v inverse, or reverse the results. grep all that is NOT in the specified field
  ----EX: egrep "student|root|steve" /etc/passw
  -- ^[ - beginning of a line
  
  ---cut---
  cut - remove sections from each line of files
  -d - delimiter (this is what separates the fields)
  -f - fields
  -c - characters
  -s - only delimited (only prints the lines that contain the delimiter character)
  --output-delimiter = changes your delimiter
  EX: cut -d: -f1,6 - delimits line by ':' and prints fields 1 through 6.
  
  Big Example of using cut to get specific files
  ls -l $HOME/CUT | cut -d' ' -f9 | cut -d"." -s -f1-2 > $HOME/CUT/names
       
----brace expansion----
- say you need to make multiple directories/files
      mkdir OR touch $HOME/11{23,34,45,56}
- this will create dirs/files 1123,1134,1145,and 1156 in the $HOME Directory

- a shortcut for making many files with numbers
touch $HOME/1123/file{1..5}.txt $HOME/1123/{6..9}~.txt
      SHORTHAND - touch $HOME/1123/{{1..5},{6..9}~}.txt
- this will create 9 files in the directory
1.txt
2.txt
3.txt
4.txt
5.txt
6~.txt
7~.txt
8~.txt
9~.txt

2>/dev/null - send error meessages to the trash bin
